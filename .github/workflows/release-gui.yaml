name: Release GUI
on:
  push:
    tags:
      - '*'
  workflow_dispatch:

env:
  APP_NAME: d_merge

jobs:
  release:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v4.2.2
        with:
          submodules: true
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        # You can remove libayatana-appindicator3-dev if you don't use the system tray feature.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev build-essential curl wget file libxdo-dev libssl-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: Swatinem/rust-cache@v2.7.8
        with:
          prefix-key: cargo-release-${{ matrix.platform }}

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4.4.0
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Node.js cache
        uses: actions/cache@v4.2.3
        with:
          path: ${{ github.workspace }}/gui/frontend/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('gui/frontend/src/**/*.[jt]s', 'gui/frontend/src/**/*.[jt]sx') }}
          restore-keys: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
      - name: Install frontend dependencies
        run: npm ci --force

      - name: Build the app
        uses: tauri-apps/tauri-action@action-v0.5.20

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseName: 'D merge v__VERSION__'
          tagName: ${{ github.ref_name }} # This only works if your workflow triggers on new tags.
          prerelease: false

      # ----------------------------------------------------------------------------------------------------------------
      - name: Compress outputs(Windows)
        shell: pwsh
        if: runner.os == 'Windows'
        run: |
          mkdir -p ./build/interfaces
          Move-Item -Path ./target/release/${{ env.APP_NAME }}.exe -Destination './build'
          Move-Item -Force -Path ./resource/assets -Destination ./build
          Compress-Archive -Path './build/*' -DestinationPath './${{ env.APP_NAME }}-${{ runner.os }}-portable.zip'
      # ----------------------------------------------------------------------------------------------------------------
      - name: Compress outputs(MacOS/Linux)
        shell: bash
        if: runner.os != 'Windows'
        run: |
          mkdir -p ./build/assets
          mv ./target/release/${{ env.APP_NAME }} ./build
          mv ./resource/assets ./build
          tar -czf ./${{ env.APP_NAME }}-${{ runner.os }}-portable.tar.gz -C ./build .

      # ----------------------------------------------------------------------------------------------------------------
      - name: Release a portable-version
        uses: ncipollo/release-action@v1.16.0
        with:
          allowUpdates: true
          artifacts: ./*.zip,./*.tar.gz
